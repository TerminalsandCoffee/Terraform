# Define provider
provider "aws" {
  region = "us-east-1"
}

# Create VPC
resource "aws_vpc" "week7_vpc" {
  cidr_block = "10.10.0.0/16"
}

# Create public subnets
resource "aws_subnet" "public_subnet_1" {
  vpc_id     = aws_vpc.example_vpc.id
  cidr_block = "10.10.1.0/24"
  availability_zone = "us-east-1a"
}

resource "aws_subnet" "public_subnet_2" {
  vpc_id     = aws_vpc.example_vpc.id
  cidr_block = "10.10.2.0/24"
  availability_zone = "us-east-1b"
}

resource "aws_subnet" "public_subnet_3" {
  vpc_id     = aws_vpc.example_vpc.id
  cidr_block = "10.10.3.0/24"
  availability_zone = "us-east-1c"
}

# Create security group for web servers
resource "aws_security_group" "web_server_security_group" {
  name_prefix = "web-server-sg-"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    # Allow traffic from the Application Load Balancer only
    security_groups = [aws_security_group.load_balancer_security_group.id]
  }
}

# Create security group for load balancer
resource "aws_security_group" "load_balancer_security_group" {
  name_prefix = "load-balancer-sg-"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    # Allow traffic from anywhere (0.0.0.0/0)
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create Launch Configuration
resource "aws_launch_configuration" "example_launch_config" {
  image_id = "ami-0c94855ba95c71c99"
  instance_type = "t2.micro"
  # Install Apache web server
  user_data = <<-EOF
              #!/bin/bash
              yum update -y
              yum install -y httpd
              systemctl start httpd
              systemctl enable httpd
              EOF
  # Use web server security group
  security_groups = [aws_security_group.web_server_security_group.id]
}

# Create Autoscaling Group
resource "aws_autoscaling_group" "example_autoscaling_group" {
  name = "example-autoscaling-group"
  desired_capacity = 2
  max_size = 5
  min_size = 2

  # Use public subnets for autoscaling group
  vpc_zone_identifier = [
    aws_subnet.public_subnet_1.id,
    aws_subnet.public_subnet_2.id,
    aws_subnet.public_subnet_3.id
  ]

  # Use Launch Configuration
  launch_configuration = aws_launch_configuration.example_launch_config.name

  # Set health check for the load balancer
  health_check_type = "ELB"

  # Tag autoscaling group for easy identification
  tags = [
    {
      key = "Name"
      value = "example-autoscaling-group"
      propagate_at_launch = true
    }
  ]
}

# Create Application Load Balancer
resource "aws_lb" "example_lb" {
  name = "example-lb"
  internal = false
  load_balancer_type = "application"

  subnets = [
    aws_subnet.public_subnet_1.id,
    aws_subnet.public_subnet_2.id,
    aws_subnet.public_subnet_3.id
  ]

  security_groups = [
    aws_security_group.load_balancer_security_group.id
  ]

  enable_deletion_protection = false

  tags = {
    Name = "example-lb"
  }

  # Create listener for HTTP traffic
  listener {
    protocol = "HTTP"
    port = "80"
    default_action {
      type = "forward"
      target_group_arn = aws_lb_target_group.example_target_group.arn
    }
  }
}

# Create target group for the autoscaling group
resource "aws_lb_target_group" "example_target_group" {
  name = "example-target-group"
  port = 80
  protocol = "HTTP"
  vpc_id = aws_vpc.example_vpc.id

  health_check {
    path = "/"
    port = "80"
    protocol = "HTTP"
    interval = 30
    timeout = 10
    unhealthy_threshold = 2
    healthy_threshold = 2
  }
}

# Create listener rule for the target group
resource "aws_lb_listener_rule" "example_listener_rule" {
  listener_arn = aws_lb.listener[0].arn

  action {
    type = "forward"
    target_group_arn = aws_lb_target_group.example_target_group.arn
  }

  condition {
    field = "path-pattern"
    values = ["/"]
  }
}
